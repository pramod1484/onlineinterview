<?php

namespace App\Proxies\__CG__;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ANSH_Shared_Model_Entity_CandidateTests extends \ANSH_Shared_Model_Entity_CandidateTests implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setRemark($remark)
    {
        $this->__load();
        return parent::setRemark($remark);
    }

    public function getRemark()
    {
        $this->__load();
        return parent::getRemark();
    }

    public function setStartTime($startTime)
    {
        $this->__load();
        return parent::setStartTime($startTime);
    }

    public function getStartTime()
    {
        $this->__load();
        return parent::getStartTime();
    }

    public function setEndTime($endTime)
    {
        $this->__load();
        return parent::setEndTime($endTime);
    }

    public function getEndTime()
    {
        $this->__load();
        return parent::getEndTime();
    }

    public function setTotalMarks($totalMarks)
    {
        $this->__load();
        return parent::setTotalMarks($totalMarks);
    }

    public function getTotalMarks()
    {
        $this->__load();
        return parent::getTotalMarks();
    }

    public function setCreatedDate($createdDate)
    {
        $this->__load();
        return parent::setCreatedDate($createdDate);
    }

    public function getCreatedDate()
    {
        $this->__load();
        return parent::getCreatedDate();
    }

    public function setModifiedDate($modifiedDate)
    {
        $this->__load();
        return parent::setModifiedDate($modifiedDate);
    }

    public function getModifiedDate()
    {
        $this->__load();
        return parent::getModifiedDate();
    }

    public function setCandidate(\ANSH_Shared_Model_Entity_Candidates $candidate = NULL)
    {
        $this->__load();
        return parent::setCandidate($candidate);
    }

    public function getCandidate()
    {
        $this->__load();
        return parent::getCandidate();
    }

    public function setTest(\ANSH_Shared_Model_Entity_Tests $test = NULL)
    {
        $this->__load();
        return parent::setTest($test);
    }

    public function getTest()
    {
        $this->__load();
        return parent::getTest();
    }

    public function setCheckedBy(\ANSH_Shared_Model_Entity_Users $checkedBy = NULL)
    {
        $this->__load();
        return parent::setCheckedBy($checkedBy);
    }

    public function getCheckedBy()
    {
        $this->__load();
        return parent::getCheckedBy();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'remark', 'startTime', 'endTime', 'totalMarks', 'createdDate', 'modifiedDate', 'candidate', 'test', 'checkedBy');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}